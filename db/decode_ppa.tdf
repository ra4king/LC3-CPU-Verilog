--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 13.0 cbx_cycloneii 2013:06:12:18:03:43:SJ cbx_lpm_add_sub 2013:06:12:18:03:43:SJ cbx_lpm_compare 2013:06:12:18:03:43:SJ cbx_lpm_decode 2013:06:12:18:03:43:SJ cbx_mgl 2013:06:12:18:05:10:SJ cbx_stratix 2013:06:12:18:03:43:SJ cbx_stratixii 2013:06:12:18:03:43:SJ  VERSION_END


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_ppa
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode3243w[1..0]	: WIRE;
	w_anode3252w[3..0]	: WIRE;
	w_anode3269w[3..0]	: WIRE;
	w_anode3279w[3..0]	: WIRE;
	w_anode3289w[3..0]	: WIRE;
	w_anode3299w[3..0]	: WIRE;
	w_anode3309w[3..0]	: WIRE;
	w_anode3319w[3..0]	: WIRE;
	w_anode3329w[3..0]	: WIRE;
	w_anode3341w[1..0]	: WIRE;
	w_anode3348w[3..0]	: WIRE;
	w_anode3359w[3..0]	: WIRE;
	w_anode3369w[3..0]	: WIRE;
	w_anode3379w[3..0]	: WIRE;
	w_anode3389w[3..0]	: WIRE;
	w_anode3399w[3..0]	: WIRE;
	w_anode3409w[3..0]	: WIRE;
	w_anode3419w[3..0]	: WIRE;
	w_data3241w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode3419w[3..3], w_anode3409w[3..3], w_anode3399w[3..3], w_anode3389w[3..3], w_anode3379w[3..3], w_anode3369w[3..3], w_anode3359w[3..3], w_anode3348w[3..3]), ( w_anode3329w[3..3], w_anode3319w[3..3], w_anode3309w[3..3], w_anode3299w[3..3], w_anode3289w[3..3], w_anode3279w[3..3], w_anode3269w[3..3], w_anode3252w[3..3]));
	w_anode3243w[] = ( (w_anode3243w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode3252w[] = ( (w_anode3252w[2..2] & (! w_data3241w[2..2])), (w_anode3252w[1..1] & (! w_data3241w[1..1])), (w_anode3252w[0..0] & (! w_data3241w[0..0])), w_anode3243w[1..1]);
	w_anode3269w[] = ( (w_anode3269w[2..2] & (! w_data3241w[2..2])), (w_anode3269w[1..1] & (! w_data3241w[1..1])), (w_anode3269w[0..0] & w_data3241w[0..0]), w_anode3243w[1..1]);
	w_anode3279w[] = ( (w_anode3279w[2..2] & (! w_data3241w[2..2])), (w_anode3279w[1..1] & w_data3241w[1..1]), (w_anode3279w[0..0] & (! w_data3241w[0..0])), w_anode3243w[1..1]);
	w_anode3289w[] = ( (w_anode3289w[2..2] & (! w_data3241w[2..2])), (w_anode3289w[1..1] & w_data3241w[1..1]), (w_anode3289w[0..0] & w_data3241w[0..0]), w_anode3243w[1..1]);
	w_anode3299w[] = ( (w_anode3299w[2..2] & w_data3241w[2..2]), (w_anode3299w[1..1] & (! w_data3241w[1..1])), (w_anode3299w[0..0] & (! w_data3241w[0..0])), w_anode3243w[1..1]);
	w_anode3309w[] = ( (w_anode3309w[2..2] & w_data3241w[2..2]), (w_anode3309w[1..1] & (! w_data3241w[1..1])), (w_anode3309w[0..0] & w_data3241w[0..0]), w_anode3243w[1..1]);
	w_anode3319w[] = ( (w_anode3319w[2..2] & w_data3241w[2..2]), (w_anode3319w[1..1] & w_data3241w[1..1]), (w_anode3319w[0..0] & (! w_data3241w[0..0])), w_anode3243w[1..1]);
	w_anode3329w[] = ( (w_anode3329w[2..2] & w_data3241w[2..2]), (w_anode3329w[1..1] & w_data3241w[1..1]), (w_anode3329w[0..0] & w_data3241w[0..0]), w_anode3243w[1..1]);
	w_anode3341w[] = ( (w_anode3341w[0..0] & data_wire[3..3]), enable_wire);
	w_anode3348w[] = ( (w_anode3348w[2..2] & (! w_data3241w[2..2])), (w_anode3348w[1..1] & (! w_data3241w[1..1])), (w_anode3348w[0..0] & (! w_data3241w[0..0])), w_anode3341w[1..1]);
	w_anode3359w[] = ( (w_anode3359w[2..2] & (! w_data3241w[2..2])), (w_anode3359w[1..1] & (! w_data3241w[1..1])), (w_anode3359w[0..0] & w_data3241w[0..0]), w_anode3341w[1..1]);
	w_anode3369w[] = ( (w_anode3369w[2..2] & (! w_data3241w[2..2])), (w_anode3369w[1..1] & w_data3241w[1..1]), (w_anode3369w[0..0] & (! w_data3241w[0..0])), w_anode3341w[1..1]);
	w_anode3379w[] = ( (w_anode3379w[2..2] & (! w_data3241w[2..2])), (w_anode3379w[1..1] & w_data3241w[1..1]), (w_anode3379w[0..0] & w_data3241w[0..0]), w_anode3341w[1..1]);
	w_anode3389w[] = ( (w_anode3389w[2..2] & w_data3241w[2..2]), (w_anode3389w[1..1] & (! w_data3241w[1..1])), (w_anode3389w[0..0] & (! w_data3241w[0..0])), w_anode3341w[1..1]);
	w_anode3399w[] = ( (w_anode3399w[2..2] & w_data3241w[2..2]), (w_anode3399w[1..1] & (! w_data3241w[1..1])), (w_anode3399w[0..0] & w_data3241w[0..0]), w_anode3341w[1..1]);
	w_anode3409w[] = ( (w_anode3409w[2..2] & w_data3241w[2..2]), (w_anode3409w[1..1] & w_data3241w[1..1]), (w_anode3409w[0..0] & (! w_data3241w[0..0])), w_anode3341w[1..1]);
	w_anode3419w[] = ( (w_anode3419w[2..2] & w_data3241w[2..2]), (w_anode3419w[1..1] & w_data3241w[1..1]), (w_anode3419w[0..0] & w_data3241w[0..0]), w_anode3341w[1..1]);
	w_data3241w[2..0] = data_wire[2..0];
END;
--VALID FILE
